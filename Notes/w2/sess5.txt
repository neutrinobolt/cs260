Functions

    Definition:
    [return type (eg. int)] [function name] (params [don't forget to include data type before each]) {
        [Function action]
    }
        Intellisense note: putting a comment on the line above a function definition makes the 
            comment appear when hovering over any function calls. Like docstrings in py
        Syntax note: Function definitions must be made BEFORE all function calls
            or the program gets mad (Unless you use a forward declaration, 
            but just don't okay?)

Arrays
    Definition:
    ex:
    int numbers[5] = {3, 6, 9, 12, 15};
        int = accepted data type
        numbers = array name
        5 = array size. Must be a constant, cannot be modified.

For loops
    ex:
    for (int index = 0 [starting value]; index < 5 [continuation condition]; ++index [increment (up 1 in this case)]) {

    }

Structs

    Def:
    Collection of values to be stored and viewed
        Declaring:
        struct structName {
            type attributes
        };
        Creating instance:
        struct structName instanceName {
            instanceAttributes
        };
        Selecting specific values:
        instanceName.instanceAttributes

Classes

Pointers Basic
    Def: Variable that is just the memory address of another Variable
        int *pointerName = &pointeeName: says that it expects pointer to be an int
        Outside of declaration, *Variable returns value at pointer's adress (pointeeName in this case)
        &Variable will always return adress of Variable
    Don't worry about them too much. 

Linked List (Data structure):
    Def: structure of data where each item is able to find next item in order 
